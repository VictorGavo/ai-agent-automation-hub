name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run Black formatter check
      run: black --check --diff agents/ bot/ database/ scripts/ examples/
    
    - name: Run isort import sorting check
      run: isort --check-only --diff agents/ bot/ database/ scripts/ examples/
    
    - name: Run flake8 linting
      run: flake8 agents/ bot/ database/ scripts/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy type checking
      run: mypy agents/ bot/ database/ scripts/ --ignore-missing-imports

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scanning
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install bandit pip-audit safety
    
    - name: Run Bandit security linter
      run: bandit -r agents/ bot/ database/ scripts/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run pip-audit for known vulnerabilities
      run: pip-audit --desc --format=json --output=audit-report.json
      continue-on-error: true
    
    - name: Run Safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          audit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    name: Tests (Python ${{ matrix.python-version }})
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_automation_hub
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,all]
    
    - name: Setup test environment
      run: |
        mkdir -p logs
        cp .env.example .env
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_automation_hub
        DISCORD_TOKEN: test_token_for_ci
        APP_MODE: testing
        LOG_LEVEL: DEBUG
    
    - name: Run unit tests
      run: pytest tests/ -v -m "unit" --cov=. --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_automation_hub
        DISCORD_TOKEN: test_token_for_ci
        APP_MODE: testing
    
    - name: Run integration tests
      run: pytest tests/ -v -m "integration" --cov=. --cov-append --cov-report=xml
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_automation_hub
        DISCORD_TOKEN: test_token_for_ci
        APP_MODE: testing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Docker Build and Test
  docker:
    runs-on: ubuntu-latest
    name: Docker Build & Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ai-automation-hub:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm ai-automation-hub:test python -c "import bot.main; print('Import successful')"
    
    - name: Test Docker Compose setup
      run: |
        cp .env.example .env
        echo "DISCORD_TOKEN=test_token" >> .env
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml up --dry-run

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: perf_test_db
          POSTGRES_USER: perf_user
          POSTGRES_PASSWORD: perf_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,all]
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: pytest tests/ -v -m "not slow" --benchmark-only --benchmark-json=benchmark.json
      env:
        DATABASE_URL: postgresql://perf_user:perf_password@localhost:5432/perf_test_db
        DISCORD_TOKEN: test_token_for_perf
        APP_MODE: testing
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # Documentation
  docs:
    runs-on: ubuntu-latest
    name: Documentation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme myst-parser
    
    - name: Build documentation
      run: |
        mkdir -p docs/build
        sphinx-build -b html docs/source docs/build
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/build/

  # Build and Publish
  build:
    runs-on: ubuntu-latest
    name: Build Package
    needs: [quality, security, test, docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Publish to PyPI (only on release)
  publish:
    runs-on: ubuntu-latest
    name: Publish to PyPI
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Deploy to Production (on main branch)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [quality, security, test, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [publish, deploy]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up temporary resources..."
        # Add cleanup commands here
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: automation_hub_postgres
    environment:
      POSTGRES_DB: automation_hub
      POSTGRES_USER: automation
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automation -d automation_hub"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - automation_network

  orchestrator:
    build:
      context: .
      dockerfile: agents/orchestrator/Dockerfile
    container_name: automation_hub_orchestrator
    environment:
      - DATABASE_URL=postgresql://automation:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/automation_hub
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - AGENT_NAME=orchestrator
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./.git:/app/.git:ro
      - ./dev_bible:/app/dev_bible:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - automation_network
    user: "1000:1000"  # Non-root user for security

  # Placeholder for future Backend Agent
  # backend-agent:
  #   build:
  #     context: .
  #     dockerfile: agents/backend/Dockerfile
  #   container_name: automation_hub_backend_agent
  #   environment:
  #     - DATABASE_URL=postgresql://automation:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/automation_hub
  #     - CLAUDE_API_KEY=${CLAUDE_API_KEY}
  #     - AGENT_NAME=backend-agent
  #   volumes:
  #     - ./logs:/app/logs
  #     - ./workspace:/app/workspace
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - automation_network
  #   user: "1000:1000"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres

networks:
  automation_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16